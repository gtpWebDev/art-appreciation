// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User for application authentication
model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  salt     String
  hash     String
  admin    Boolean @default(false)
}

// TzAccountOwner is the person behind one or more TzAccounts
model TzAccountOwner {
  id         Int         @id @default(autoincrement())
  address    String      @unique
  tz_account TzAccount[]
}

// TzAccount is the unique account through which all transactions are applied on the Tezos blockchain
model TzAccount {
  id       Int            @id @default(autoincrement())
  address  String         @unique
  artist   Boolean        @default(false)
  owner    TzAccountOwner @relation(fields: [owner_id], references: [id])
  owner_id Int
  score    Decimal? // not sure yet whether this will be maintained or calculated
  Purchase Purchase[]
  Listing  Listing[]

  @@index([address]) // support identifying new accounts
}

// Collection is an art project consisting of 1 or many Nfts
// fx_collection_id used as primary key as well controlled int
model Collection {
  id  Int   @id @unique
  nft Nft[]
}

// Nft is an individual piece of generative art
model Nft {
  id            Int        @id @default(autoincrement())
  fx_nft_id     String     @unique
  collection    Collection @relation(fields: [collection_id], references: [id])
  collection_id Int
  Purchase      Purchase[]
  Listing       Listing[]

  @@index([fx_nft_id]) // support identifying new Nfts
}

// Purchases consist of Primary (from artist) or Secondary (from owners)
model Purchase {
  id         Int       @id @default(autoincrement())
  is_primary Boolean
  nft        Nft       @relation(fields: [nft_id], references: [id])
  nft_id     Int
  account    TzAccount @relation(fields: [account_id], references: [id])
  account_id Int
  price_tz   Decimal
  timestamp  DateTime
  score      Decimal
}

// Staging table. nftId and accountId are in their raw forms.
model PurchaseStaging {
  id             Int      @id @default(autoincrement())
  is_primary     Boolean
  fx_nft_id      String
  collection_id  Int
  raw_account_id String
  price_tz       Decimal
  timestamp      DateTime

  @@index([fx_nft_id]) // support identifying new Nfts
  @@index([collection_id]) // support identifying new Collections
  @@index([raw_account_id]) // support identifying new accounts
}

// Listings consist of listings and delistings
model Listing {
  id         Int       @id @default(autoincrement())
  is_listing Boolean
  nft        Nft       @relation(fields: [nft_id], references: [id])
  nft_id     Int
  account    TzAccount @relation(fields: [account_id], references: [id])
  account_id Int
  timestamp  DateTime
  score      Decimal
}

// Staging table. nftId and accountId are in their raw forms.
model ListingStaging {
  id             Int      @id @default(autoincrement())
  is_listing     Boolean
  fx_nft_id      String
  collection_id  Int
  raw_account_id String
  timestamp      DateTime

  @@index([fx_nft_id]) // support identifying new Nfts
  @@index([collection_id]) // support identifying new Collections
  @@index([raw_account_id]) // support identifying new accounts
}
